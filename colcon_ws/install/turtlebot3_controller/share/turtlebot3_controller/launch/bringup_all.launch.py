# ~/ROS/ROS_25/colcon_ws/src/turtlebot3_controller/launch/bringup_all.launch.py

from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription
from launch.substitutions import LaunchConfiguration, PathJoinSubstitution
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch_ros.actions import Node
from ament_index_python.packages import get_package_share_directory

def generate_launch_description():
    pkg_share  = get_package_share_directory('turtlebot3_controller')
    use_sim_time = LaunchConfiguration('use_sim_time')   # 기본값은 DeclareLaunchArgument 에서 처리
    map_yaml = LaunchConfiguration('map_yaml')       # 아래 DeclareLaunchArgument 의 default_value 가 사용됩니다

    return LaunchDescription([
        # 0. 시뮬레이션 시간 사용 여부
        # This is important for Gazebo simulation
        # to synchronize with ROS time.
        # If true, use the simulation clock.
        # If false, use the system clock.
        DeclareLaunchArgument(
            'use_sim_time',
            default_value='true',
            description='Use simulation (Gazebo) clock if true'
        ),
        # 0. 맵 파일 경로 (Cartographer로 생성된 YAML)
        # This is the map file used by the map server.
        # It should be a YAML file generated by Cartographer.
        DeclareLaunchArgument(
            'map_yaml',
            default_value=PathJoinSubstitution([pkg_share, 'maps', 'map.yaml']),
            description='Full path to map yaml file'
        ),

        # 1. Gazebo 시뮬레이션 월드
        IncludeLaunchDescription(
            PythonLaunchDescriptionSource(
                PathJoinSubstitution([
                    get_package_share_directory('turtlebot3_gazebo'),
                    'launch',
                    'turtlebot3_world.launch.py'
                ])
            ),
            launch_arguments={'use_sim_time': use_sim_time}.items(),
        ),

        # 2. Cartographer SLAM
        IncludeLaunchDescription(
            PythonLaunchDescriptionSource(
                PathJoinSubstitution([
                    get_package_share_directory('turtlebot3_cartographer'),
                    'launch',
                    'cartographer.launch.py'
                ])
            ),
            launch_arguments={'use_sim_time': use_sim_time}.items(),
        ),

        # 3–4. Nav2 (map server, AMCL, planner)
        IncludeLaunchDescription(
            PythonLaunchDescriptionSource(
                PathJoinSubstitution([
                    get_package_share_directory('turtlebot3_navigation2'),
                    'launch',
                    'navigation2.launch.py'
                ])
            ),
            launch_arguments={
                'map':          map_yaml,
                'use_sim_time': use_sim_time
            }.items(),
        ),

        # 5. Teleop 키보드 노드
        Node(
            package='turtlebot3_teleop',
            executable='teleop_keyboard',
            name='teleop_keyboard',
            parameters=[{'use_sim_time': use_sim_time}],
        ),

        # 6. Sensor Listener (LaserScan, Odometry 구독)
        Node(
            package='turtlebot3_controller',
            executable='sensor_listener',
            name='sensor_listener',
            parameters=[{'use_sim_time': use_sim_time}],
        ),

        # 7. Obstacle Avoider (장애물 회피)
        Node(
            package='turtlebot3_controller',
            executable='avoid',
            name='obstacle_avoider',
            parameters=[{
                'safety_distance': 0.5,    # m
                'forward_speed':   0.05,   # m/s
                'turn_speed':      0.05,   # rad/s
                'use_sim_time':    use_sim_time
            }],
        ),

        # 8. Navigator (자율 주행 액션 클라이언트)
        Node(
            package='turtlebot3_controller',
            executable='navigate',
            name='navigator',
            parameters=[{'use_sim_time': use_sim_time}],
        ),
    ])
